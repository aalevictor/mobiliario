# Dockerfile alternativo para CentOS 7 - Versão de fallback
# Usa Node.js 18 que tem melhor compatibilidade com GLIBC mais antigo

FROM node:18-alpine

# Instala dependências básicas incluindo MySQL client libraries
RUN apk add --no-cache \
    curl \
    openssl \
    ca-certificates \
    tzdata \
    libc6-compat \
    mysql-client \
    mariadb-connector-c \
    mariadb-dev \
    && update-ca-certificates

# Solução mais robusta para libmysqlclient.so.18
RUN set -e && \
    # Lista bibliotecas disponíveis para debug
    find /usr/lib -name "*mysql*" -o -name "*maria*" || true && \
    # Cria múltiplos links simbólicos para garantir compatibilidade
    mkdir -p /usr/lib64 && \
    if [ -f /usr/lib/libmariadb.so.3 ]; then \
        ln -sf /usr/lib/libmariadb.so.3 /usr/lib/libmysqlclient.so.18 && \
        ln -sf /usr/lib/libmariadb.so.3 /usr/lib/libmysqlclient.so && \
        ln -sf /usr/lib/libmariadb.so.3 /usr/lib64/libmysqlclient.so.18 && \
        ln -sf /usr/lib/libmariadb.so.3 /usr/lib64/libmysqlclient.so; \
    elif [ -f /usr/lib/libmariadb.so ]; then \
        ln -sf /usr/lib/libmariadb.so /usr/lib/libmysqlclient.so.18 && \
        ln -sf /usr/lib/libmariadb.so /usr/lib/libmysqlclient.so && \
        ln -sf /usr/lib/libmariadb.so /usr/lib64/libmysqlclient.so.18 && \
        ln -sf /usr/lib/libmariadb.so /usr/lib64/libmysqlclient.so; \
    else \
        echo "⚠️ MariaDB library not found, will use static Prisma binaries"; \
    fi && \
    # Verifica se os links foram criados
    ls -la /usr/lib/libmysqlclient* || echo "MySQL client links not created" && \
    ls -la /usr/lib64/libmysqlclient* || echo "MySQL client links (lib64) not created"

# Define o diretório de trabalho
WORKDIR /app

# Copia arquivos de dependências primeiro (para cache de layer)
COPY package*.json ./
COPY prisma ./prisma/

# Instala dependências
RUN npm ci --only=production --no-audit --no-fund

# Instala dev dependencies temporariamente para build
RUN npm ci --no-audit --no-fund

# Copia o código fonte
COPY . .

# Gera o cliente Prisma
RUN npx prisma generate

# Faz o build da aplicação
RUN npm run build

# Remove dev dependencies para reduzir tamanho da imagem
RUN npm prune --production

# Cria usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs

# Cria diretórios necessários
RUN mkdir -p /app/uploads /app/logs \
    && chown -R nextjs:nodejs /app/uploads /app/logs /app/.next || true

# Muda para usuário não-root
USER nextjs

# Expõe a porta 3500 (conforme requisito)
EXPOSE 3500

# Define variáveis de ambiente para produção
ENV NODE_ENV=production
ENV PORT=3500
ENV HOSTNAME="0.0.0.0"
ENV ENVIRONMENT=production

# Configurações específicas para Prisma + MySQL no Alpine
ENV PRISMA_CLI_BINARY_TARGETS="linux-musl-openssl-1.1.x"
ENV PRISMA_QUERY_ENGINE_BINARY="linux-musl-openssl-1.1.x"
ENV PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
ENV PRISMA_SCHEMA_ENGINE_BINARY="linux-musl-openssl-1.1.x"
ENV PRISMA_INTROSPECTION_ENGINE_BINARY="linux-musl-openssl-1.1.x"
ENV PRISMA_FMT_BINARY="linux-musl-openssl-1.1.x"

# Healthcheck para monitoramento
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3500/api/health || exit 1

# Explicitamente remove qualquer entrypoint herdado
ENTRYPOINT []
CMD ["npm", "start"]
