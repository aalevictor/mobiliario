generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
}

model Usuario {
  id                     String                 @id @default(uuid())
  nome                   String
  email                  String                 @unique
  login                  String?                @unique
  permissao              Permissao
  senha                  String?
  tipo                   Tipo_Usuario           @default(INTERNO)
  status                 Boolean                @default(true)
  alterarSenha           Boolean                @default(false)
  criadoEm               DateTime               @default(now())
  atualizadoEm           DateTime               @default(now()) @updatedAt
  Avaliacao_Julgadora    Avaliacao_Julgadora[]
  avaliacoes_licitadoras Avaliacao_Licitadora[]
  cadastro               Cadastro?

  @@map("usuarios")
}

model Cadastro {
  id                   Int                   @id @default(autoincrement())
  nome                 String
  email                String
  cnpj                 String?               @unique
  cpf                  String                @unique
  telefone             String
  cep                  String                @db.VarChar(9)
  uf                   String                @db.VarChar(2)
  cidade               String
  logradouro           String
  numero               String?
  complemento          String?
  protocolo            String?               @unique
  carteira_tipo        Tipo_Carteira         @default(CAU)
  carteira_numero      String
  equipe               Boolean               @default(false)
  usuarioId            String                @unique
  criadoEm             DateTime              @default(now())
  atualizadoEm         DateTime              @default(now()) @updatedAt
  arquivos             Arquivo[]
  avaliacoes_julgadora Avaliacao_Julgadora[]
  avaliacao_licitadora Avaliacao_Licitadora?
  usuario              Usuario               @relation(fields: [usuarioId], references: [id])
  participantes        Participante[]

  @@map("cadastros")
}

model Participante {
  id           Int      @id @default(autoincrement())
  nome         String
  documento    String
  cadastroId   Int
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  cadastro     Cadastro @relation(fields: [cadastroId], references: [id])

  @@map("participantes")
}

model Avaliacao_Licitadora {
  id           String   @id @default(uuid())
  cadastroId   Int      @unique
  avaliadorId  String
  parecer      String?
  aprovado     Boolean  @default(false)
  observacoes  String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  avaliador    Usuario  @relation(fields: [avaliadorId], references: [id])
  cadastro     Cadastro @relation(fields: [cadastroId], references: [id])

  @@map("avaliacoes_licitadoras")
}

model Avaliacao_Julgadora {
  id           String   @id @default(uuid())
  cadastroId   Int
  avaliadorId  String
  parecer      String?
  aprovado     Boolean  @default(false)
  observacoes  String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  avaliador    Usuario  @relation(fields: [avaliadorId], references: [id])
  cadastro     Cadastro @relation(fields: [cadastroId], references: [id])

  @@unique([cadastroId, avaliadorId])
  @@map("avaliacoes_julgadoras")
}

model Arquivo {
  id           String      @id @default(uuid())
  caminho      String
  tipo         TipoArquivo
  cadastroId   Int
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @default(now())
  tamanho      Int?
  cadastro     Cadastro    @relation(fields: [cadastroId], references: [id])

  @@map("arquivos")
}

model Duvida {
  id           String   @id @default(uuid())
  pergunta     String
  email        String
  nome         String
  resposta     String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt

  @@map("duvidas")
}

model LogAuditoria {
  id          String      @id @default(uuid())
  tipo        TipoLog
  nivel       NivelLog
  operacao    String?     // CREATE, UPDATE, DELETE, READ
  tabela      String?     // Nome da tabela afetada
  registroId  String?     // ID do registro afetado
  dadosAntes  Json?       // Estado anterior do registro
  dadosDepois Json?       // Estado posterior do registro
  usuario     String?     // ID ou login do usuário
  ip          String?
  userAgent   String?
  erro        String?     @db.Text
  stackTrace  String?     @db.Text
  duracao     Int?        // Duração da operação em ms
  endpoint    String?     // Endpoint da API chamado
  metodo      String?     // GET, POST, PUT, DELETE
  headers     Json?       // Headers relevantes da requisição
  query       String?     @db.Text // Query SQL executada (se aplicável)
  emailEnviado Boolean    @default(false) // Se email de erro crítico foi enviado
  criadoEm    DateTime    @default(now())

  @@map("logs_auditoria")
  @@index([tipo])
  @@index([nivel])
  @@index([criadoEm])
  @@index([usuario])
  @@index([tabela])
}

enum Permissao {
  DEV
  PARTICIPANTE
  ADMIN
  LICITACAO
  JULGADORA
}

enum Tipo_Usuario {
  INTERNO
  EXTERNO
}

enum Tipo_Carteira {
  CAU
  CREA
}

enum TipoArquivo {
  DOC_ESPECIFICA
  PROJETOS
}

enum TipoLog {
  DATABASE_OPERATION  // Operações do banco de dados
  ERROR              // Erros do sistema
  AUTH               // Autenticação e autorização
  API_REQUEST        // Requisições de API
  SYSTEM             // Eventos do sistema
}

enum NivelLog {
  INFO     // Informações gerais
  WARNING  // Avisos
  ERROR    // Erros
  CRITICAL // Erros críticos que requerem email
}
