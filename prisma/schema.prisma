generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                     String                 @id @default(uuid())
  nome                   String
  email                  String                 @unique
  login                  String?                @unique
  permissao              Permissao
  senha                  String?
  tipo                   Tipo_Usuario           @default(INTERNO)
  status                 Boolean                @default(true)
  alterarSenha           Boolean                @default(false)
  criadoEm               DateTime               @default(now())
  atualizadoEm           DateTime               @default(now()) @updatedAt
  Avaliacao_Julgadora    Avaliacao_Julgadora[]
  avaliacoes_licitadoras Avaliacao_Licitadora[]
  cadastro               Cadastro?
  logs                   Log[]

  @@map("usuarios")
}

model Cadastro {
  id                   Int                   @id @default(autoincrement())
  nome                 String
  email                String
  cnpj                 String?               @unique
  cpf                  String                @unique
  telefone             String
  cep                  String                @db.VarChar(9)
  uf                   String                @db.VarChar(2)
  cidade               String
  logradouro           String
  numero               String?
  complemento          String?
  protocolo            String?               @unique
  carteira_tipo        Tipo_Carteira         @default(CAU)
  carteira_numero      String
  equipe               Boolean               @default(false)
  usuarioId            String                @unique
  criadoEm             DateTime              @default(now())
  atualizadoEm         DateTime              @default(now()) @updatedAt
  arquivos             Arquivo[]
  avaliacoes_julgadora Avaliacao_Julgadora[]
  avaliacao_licitadora Avaliacao_Licitadora?
  usuario              Usuario               @relation(fields: [usuarioId], references: [id])
  participantes        Participante[]

  @@map("cadastros")
}

model Participante {
  id           Int      @id @default(autoincrement())
  nome         String
  documento    String
  cadastroId   Int
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  cadastro     Cadastro @relation(fields: [cadastroId], references: [id])

  @@map("participantes")
}

model Avaliacao_Licitadora {
  id           String   @id @default(uuid())
  cadastroId   Int      @unique
  avaliadorId  String
  parecer      String?
  aprovado     Boolean  @default(false)
  observacoes  String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  avaliador    Usuario  @relation(fields: [avaliadorId], references: [id])
  cadastro     Cadastro @relation(fields: [cadastroId], references: [id])

  @@map("avaliacoes_licitadoras")
}

model Avaliacao_Julgadora {
  id           String   @id @default(uuid())
  cadastroId   Int
  avaliadorId  String
  parecer      String?
  aprovado     Boolean  @default(false)
  observacoes  String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  avaliador    Usuario  @relation(fields: [avaliadorId], references: [id])
  cadastro     Cadastro @relation(fields: [cadastroId], references: [id])

  @@unique([cadastroId, avaliadorId])
  @@map("avaliacoes_julgadoras")
}

model Arquivo {
  id           String      @id @default(uuid())
  caminho      String
  tipo         TipoArquivo
  cadastroId   Int
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @default(now())
  tamanho      Int?
  cadastro     Cadastro    @relation(fields: [cadastroId], references: [id])

  @@map("arquivos")
}

model Duvida {
  id           String   @id @default(uuid())
  pergunta     String
  email        String
  nome         String
  resposta     String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt

  @@map("duvidas")
}

model Log {
  id          String      @id @default(uuid())
  acao        String      // CREATE, UPDATE, DELETE, LOGIN, ERROR, etc.
  entidade    String      // Nome da tabela/modelo afetado
  entidadeId  String?     // ID da entidade afetada (pode ser null para logs de sistema)
  dadosAntes  Json?       // Dados antes da alteração
  dadosDepois Json?       // Dados após a alteração
  mensagem    String      // Descrição da ação
  nivel       NivelLog    @default(INFO)
  usuarioId   String?     // ID do usuário que executou a ação
  ip          String?     // IP do usuário
  userAgent   String?     // User agent do navegador
  erro        String?     // Detalhes do erro, se houver
  stackTrace  String?     // Stack trace do erro
  criadoEm    DateTime    @default(now())
  
  usuario     Usuario?    @relation(fields: [usuarioId], references: [id])

  @@map("logs")
}

enum Permissao {
  DEV
  PARTICIPANTE
  ADMIN
  LICITACAO
  JULGADORA
}

enum NivelLog {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum Tipo_Usuario {
  INTERNO
  EXTERNO
}

enum Tipo_Carteira {
  CAU
  CREA
}

enum TipoArquivo {
  DOC_ESPECIFICA
  PROJETOS
}
