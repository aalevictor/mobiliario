#!/bin/bash

# Script de Deploy para CentOS 7
# Concurso de Mobili√°rio Urbano - SPURBANISMO

set -e

echo "üöÄ Iniciando deploy da aplica√ß√£o Mobili√°rio Urbano..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verifica se est√° rodando como root ou com sudo
if [[ $EUID -eq 0 ]]; then
   log_warning "Rodando como root. Recomenda-se usar um usu√°rio com sudo."
fi

# Verifica se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    log_error "Docker n√£o est√° instalado. Instale o Docker primeiro."
    exit 1
fi

# Verifica se o Docker Compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    log_error "Docker Compose n√£o est√° instalado. Instale o Docker Compose primeiro."
    exit 1
fi

# Define o comando do Docker Compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
else
    DOCKER_COMPOSE="docker compose"
fi

log_info "Usando $DOCKER_COMPOSE"

# Cria diret√≥rios necess√°rios
log_info "Criando diret√≥rios necess√°rios..."
mkdir -p uploads logs

# Verifica se o arquivo .env.production existe
if [ ! -f ".env.production" ]; then
    log_warning "Arquivo .env.production n√£o encontrado."
    log_info "Criando .env.production baseado no exemplo..."
    
    if [ -f "env.production.example" ]; then
        cp env.production.example .env.production
        log_warning "Configure as vari√°veis em .env.production antes de continuar!"
        log_warning "Especialmente DATABASE_URL e AUTH_SECRET"
        read -p "Pressione Enter para continuar ap√≥s configurar o .env.production..."
    else
        log_error "Arquivo env.production.example n√£o encontrado!"
        exit 1
    fi
fi

# Para o container se estiver rodando
log_info "Parando containers existentes..."
$DOCKER_COMPOSE down --remove-orphans || true

# Remove imagens antigas para for√ßar rebuild
log_info "Removendo imagens antigas..."
docker rmi moburb-concurso:latest || true
docker rmi mobiliario_moburb-app:latest || true

# Faz o build da nova imagem
log_info "Construindo nova imagem Docker..."
$DOCKER_COMPOSE build --no-cache

# Verifica se o banco est√° acess√≠vel
log_info "Verificando conectividade com o banco de dados..."
DATABASE_URL=$(grep DATABASE_URL .env.production | cut -d '=' -f2 | tr -d '"')
if [[ -z "$DATABASE_URL" ]]; then
    log_error "DATABASE_URL n√£o configurada no .env.production"
    exit 1
fi

# Inicia os containers (migrations e seed executam automaticamente)
log_info "Iniciando containers com setup autom√°tico..."
$DOCKER_COMPOSE up -d

# Aguarda o container ficar saud√°vel
log_info "Aguardando aplica√ß√£o inicializar..."
sleep 10

# Verifica se o container est√° rodando
if docker ps | grep -q "moburb-concurso"; then
    log_success "Container iniciado com sucesso!"
else
    log_error "Falha ao iniciar o container"
    log_info "Verificando logs..."
    $DOCKER_COMPOSE logs
    exit 1
fi

# Testa o health check
log_info "Testando health check..."
for i in {1..30}; do
    if curl -f http://localhost:3500/api/health &> /dev/null; then
        log_success "Aplica√ß√£o est√° saud√°vel!"
        break
    fi
    
    if [ $i -eq 30 ]; then
        log_error "Aplica√ß√£o n√£o respondeu ao health check ap√≥s 30 tentativas"
        log_info "Verificando logs..."
        $DOCKER_COMPOSE logs --tail=50
        exit 1
    fi
    
    log_info "Aguardando aplica√ß√£o... (tentativa $i/30)"
    sleep 2
done

# Mostra informa√ß√µes finais
log_success "üéâ Deploy conclu√≠do com sucesso!"
echo ""
log_info "Informa√ß√µes do deploy:"
echo "  ‚Ä¢ URL: https://concursomoburb.prefeitura.sp.gov.br"
echo "  ‚Ä¢ Porta local: 3500"
echo "  ‚Ä¢ Container: moburb-concurso"
echo ""
log_info "Comandos √∫teis:"
echo "  ‚Ä¢ Ver logs: $DOCKER_COMPOSE logs -f"
echo "  ‚Ä¢ Parar: $DOCKER_COMPOSE down"
echo "  ‚Ä¢ Reiniciar: $DOCKER_COMPOSE restart"
echo "  ‚Ä¢ Status: $DOCKER_COMPOSE ps"
echo ""
log_info "Arquivos importantes:"
echo "  ‚Ä¢ Logs da aplica√ß√£o: ./logs/"
echo "  ‚Ä¢ Uploads: ./uploads/"
echo "  ‚Ä¢ Configura√ß√£o: .env.production"
